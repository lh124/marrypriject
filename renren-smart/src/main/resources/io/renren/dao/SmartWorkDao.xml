<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.renren.dao.smart.SmartWorkDao">

	<!-- 可根据自己需要-->
	<sql id="allColumnsAlias">
		id as id ,name as name ,type as type ,pic as pic ,classid,content as content ,
		createTime as createtime,subject as subject,teacherId as teacherId,teacherName as teacherName,
		newsType as newsType,newsId as newsId,teacherPic as teacherPic 		
	</sql>
	<!-- 可根据自己需要-->
	<sql id="allColumns">
		id ,name ,type ,pic ,content ,createTime,classid,subject,teacherId,teacherName,newsType,newsId,teacherPic 		
	</sql>
	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="io.renren.entity.smart.SmartWorkEntity" id="smartWorkMap">
		        <result property="id" column="id"/>
		        <result property="name" column="name"/>
		        <result property="type" column="type"/>
		        <result property="pic" column="pic"/>
		        <result property="content" column="content"/>
		        <result property="classid" column="classid"/>
		        <result property="createtime" column="createTime"/>
		        <result property="teacherId" column="teacherId"/>
		        <result property="teacherName" column="teacherName"/>
		        <result property="subject" column="subject"/>
		        <result property="newsType" column="newsType"/>
		        <result property="newsId" column="newsId"/>
		        <result property="teacherPic" column="teacherPic"/>
	    </resultMap>

	<select id="queryObject" resultType="io.renren.entity.smart.SmartWorkEntity">
		select <include refid="allColumns"></include> from smart_work where id = #{value}
	</select>
	
	<select id="queryListtongji" resultType="io.renren.entity.smart.SmartWorkEntity">
		select t4.id,t4.newsType,t4.newsId,t3.student_name teacherName,t4.subject,t4.name,
		    ifnull(t3.pic,'http://guanyukeji-static.oss-cn-hangzhou.aliyuncs.com/1.png') teacherPic,
		    t4.content,t4.pic,t4.createTime from student t3,(
			select t1.id,t1.teacherId, t1.name,t1.content,t1.pic,t1.classid,t1.createTime,t1.subject,t1.teacherName,t1.teacherPic, t2.newsType,t2.id newsId 
			from smart_work t1,smart_news t2 
			where t1.id=t2.newsId and t2.states=7 and t2.userId=#{userId}
			)t4 where t3.id=t4.teacherId order by t4.createTime desc
			limit #{offset}, #{limit}
	</select>

	<select id="queryList" resultType="io.renren.entity.smart.SmartWorkEntity">
	    select t1.id,t1.name,t1.type,t1.pic,t1.content,t1.createTime,t1.classid,t1.subject,
			t2.student_name teacherName,t2.id teacherId,
			ifnull(t2.pic,'http://guanyukeji-static.oss-cn-hangzhou.aliyuncs.com/1.png') teacherPic 
			from smart_work t1,student t2 where t1.teacherId=t2.id and t1.classid=#{classid}
        order by t1.createTime desc
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="queryTotal" resultType="int">
		select count(*) from smart_work where classid = #{classid}
	</select>
	 
	<insert id="save" parameterType="io.renren.entity.smart.SmartWorkEntity" useGeneratedKeys="true" keyProperty="id">
		insert into smart_work
		(
			`name`, 
			`type`, 
			`pic`, 
			`content`, 
			`classid`, 
			`subject`, 
			`teacherId`,
			`teacherName`,
			`teacherPic`,
			`createTime`
		)
		values
		(
			#{name}, 
			#{type}, 
			#{pic}, 
			#{content}, 
			#{classid}, 
			#{subject}, 
			#{teacherId},
			#{teacherName},
			#{teacherPic},
			#{createtime}
		)
	</insert>
	 
	<update id="update" parameterType="io.renren.entity.smart.SmartWorkEntity">
		update smart_work 
		<set>
			<if test="name != null">`name` = #{name}, </if>
			<if test="type != null">`type` = #{type}, </if>
			<if test="pic != null">`pic` = #{pic}, </if>
			<if test="content != null">`content` = #{content}, </if>
			<if test="subject != null">`subject` = #{subject}, </if>
			<if test="teacherId != null">`teacherId` = #{teacherId}, </if>
			<if test="teacherName != null">`teacherName` = #{teacherName}, </if>
			<if test="teacherPic != null">`teacherPic` = #{teacherPic}, </if>
			<if test="createtime != null">`createTime` = #{createtime}</if>
		</set>
		where id = #{id}
	</update>
	
	<delete id="delete">
		delete from smart_work where id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from smart_work where id in 
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

</mapper>