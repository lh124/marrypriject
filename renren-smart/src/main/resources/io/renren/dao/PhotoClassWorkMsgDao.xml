<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.renren.dao.smart.PhotoClassWorkMsgDao">

	<!-- 可根据自己需要-->
	<sql id="allColumnsAlias">
		id as id ,class_id as classId ,user_id as userId ,content as content ,gmt_create as gmtCreate ,gmt_modified as gmtModified ,status as status ,voice as voice 		
	</sql>
	<!-- 可根据自己需要-->
	<sql id="allColumns">
		id ,class_id ,user_id ,content ,gmt_create ,gmt_modified ,status ,voice 		
	</sql>
	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="io.renren.entity.smart.PhotoClassWorkMsgEntity" id="photoClassWorkMsgMap">
		        <result property="id" column="id"/>
		        <result property="classId" column="class_id"/>
		        <result property="userId" column="user_id"/>
		        <result property="content" column="content"/>
		        <result property="gmtCreate" column="gmt_create"/>
		        <result property="gmtModified" column="gmt_modified"/>
		        <result property="status" column="status"/>
		        <result property="voice" column="voice"/>
	    </resultMap>

	<select id="queryObject" resultType="io.renren.entity.smart.PhotoClassWorkMsgEntity">
		select <include refid="allColumns"></include> from photo_class_work_msg where id = #{value}
	</select>
	
	
	<resultMap type="io.renren.entity.smart.PhotoClassWorkMsgEntity" id="queryListMap">
		<id property="id" column="id"/>
		<result property="content" column="content"/>
		<result property="gmtCreate" column="gmt_create"/>
		<result property="userId" column="user_id"/>
		<result property="voice" column="voice"/>
		<result property="newsType" column="newsType"/>
		<result property="newsId" column="newsId"/>
		<collection property="picList" resultMap="queryPicListMap"></collection>
	</resultMap>
	<resultMap type="io.renren.entity.smart.PhotoPicWorkMsgEntity" id="queryPicListMap">
		<result property="name" column="name"/>
	</resultMap>
	
	<select id="queryListtongji" resultMap="queryListMap">
	    select t1.*,t2.newsType,t2.id as newsId from(
			SELECT pcm.id,pcm.content,pcm.gmt_create,ppwm.name ,pcm.voice,pcm.user_id FROM photo_class_work_msg pcm left JOIN
			 photo_pic_work_msg ppwm ON pcm.id = ppwm.related_id WHERE pcm.class_id=#{classId}
			)t1,smart_news t2 where t2.userId = #{userId} and t1.id = t2.newsId
	</select>
	
	<select id="queryList" resultMap="queryListMap">
		SELECT pcm.id,pcm.content,pcm.gmt_create,ppwm.name ,pcm.voice,pcm.user_id
		FROM photo_class_work_msg pcm left JOIN photo_pic_work_msg ppwm ON pcm.id = ppwm.related_id  WHERE pcm.class_id=#{classId}
		 
        <choose>
            <when test="sidx != null and sidx.trim() != ''"> 
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
 	<select id="queryTotal" resultType="int">
		select count(*) FROM photo_class_work_msg pcm left JOIN photo_pic_work_msg ppwm ON pcm.id = ppwm.related_id and ppwm.pic_type=#{picType} 
		 WHERE pcm.class_id=#{classId} 
	</select>
	 
	<insert id="save" parameterType="io.renren.entity.smart.PhotoClassWorkMsgEntity">
		insert into photo_class_work_msg
		(
			`id`, 
			`class_id`, 
			`user_id`, 
			`content`, 
			`gmt_create`, 
			`gmt_modified`, 
			`status`, 
			`voice`
		)
		values
		(
			#{id}, 
			#{classId}, 
			#{userId}, 
			#{content}, 
			#{gmtCreate}, 
			#{gmtModified}, 
			#{status}, 
			#{voice}
		)
	</insert>
	 
	<update id="update" parameterType="io.renren.entity.smart.PhotoClassWorkMsgEntity">
		update photo_class_work_msg 
		<set>
			<if test="classId != null">`class_id` = #{classId}, </if>
			<if test="userId != null">`user_id` = #{userId}, </if>
			<if test="content != null">`content` = #{content}, </if>
			<if test="gmtCreate != null">`gmt_create` = #{gmtCreate}, </if>
			<if test="gmtModified != null">`gmt_modified` = #{gmtModified}, </if>
			<if test="status != null">`status` = #{status}, </if>
			<if test="voice != null">`voice` = #{voice}</if>
		</set>
		where id = #{id}
	</update>
	
	<delete id="delete">
		delete from photo_class_work_msg where id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from photo_class_work_msg where id in 
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

</mapper>