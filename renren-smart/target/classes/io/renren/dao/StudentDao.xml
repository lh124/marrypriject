<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.renren.dao.smart.StudentDao">

	<!-- 可根据自己需要-->
	<sql id="allColumnsAlias">
		id as id ,student_code as studentCode ,student_no as studentNo ,user_type as type,
		student_name as studentName ,sex as sex ,student_type as studentType ,
		pic as pic ,class_id as classId ,passwordd as passwordd, open_id as openId ,
		longitude, latitude		
	</sql>
	<!-- 可根据自己需要-->
	<sql id="allColumns">
		id ,student_code ,student_no ,student_name ,sex ,user_type,student_type ,pic ,class_id ,passwordd , open_id,
		longitude, latitude	
	</sql>
	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="io.renren.entity.smart.StudentEntity" id="studentMap">
		        <result property="id" column="id"/>
		        <result property="studentCode" column="student_code"/>
		        <result property="studentNo" column="student_no"/>
		        <result property="studentName" column="student_name"/>
		        <result property="sex" column="sex"/>
		        <result property="studentType" column="student_type"/>
		        <result property="pic" column="pic"/>
		        <result property="classId" column="class_id"/>
		        <result property="passwordd" column="passwordd"/>
		        <result property="openId" column="open_id"/>
		        <result property="longitude" column="longitude"/>
		        <result property="userType" column="user_type"/>
		        <result property="latitude" column="latitude"/>
	    </resultMap>

	<select id="queryObject" resultType="io.renren.entity.smart.StudentEntity">
		select <include refid="allColumns"></include> from student where id = #{value}
	</select>
	
	<select id="queryList" resultType="io.renren.entity.smart.StudentEntity">
		select top ${limit} <include refid="allColumns"></include>
		from student
		where id not in
		(
		 select top ${begin} id from student where class_id=${classId}
		 	<choose>
		            <when test="sidx != null and sidx.trim() != ''">
		                order by ${sidx} ${order}
		            </when>
					<otherwise>
		                order by id desc
					</otherwise>
		     </choose>
		) and class_id=${classId}
		<choose>
		         <when test="sidx != null and sidx.trim() != ''">
		             order by ${sidx} ${order}
		         </when>
				<otherwise>
				             order by id desc
				</otherwise>
		</choose>
	</select>

	<select id="queryListtongji" resultType="io.renren.entity.smart.StudentEntity">
		<choose>
		      <when test="classId != null">
		           SELECT (select  COUNT(*) from student where class_id = ${classId} and open_id != '') as student_code,
                       (select  COUNT(*) from student where class_id = ${classId} ) as student_no  from student where id = (select max(id) from student)
		      </when>
			  <otherwise>
		           select id,class_name as student_name from class where school_id = ${schoolId} order by id ASC
			  </otherwise>
		</choose>
	</select>
	
	<select id="queryListtongjiimgxf" resultType="io.renren.entity.smart.StudentEntity">
		select * from student where ${classId}
	</select>
	
 	<select id="queryTotal" resultType="int">
		select count(*) from student where class_id=${classId}
	</select>
	
	<select id="queryTotal" resultType="int">
		select count(*) from student where class_id=${classId}
	</select>
	 
	<insert id="save" parameterType="io.renren.entity.smart.StudentEntity">
		insert into student
		(
			student_code, 
			student_no, 
			student_name, 
			sex, 
			student_type, 
			pic, 
			class_id, 
			passwordd,
			open_id,
			latitude,
			user_type,
			longitude
		)
		values
		( 
			#{studentCode}, 
			#{studentNo}, 
			#{studentName}, 
			#{sex}, 
			#{studentType}, 
			#{pic}, 
			#{classId}, 
			#{passwordd},
			#{openId},
			#{latitude},
			#{userType},
			#{longitude}
			
		)
	</insert>
	
	<update id="updateOpenId" parameterType="long">
		update student set open_id = null where id = #{id}
	</update>
	 
	<update id="update" parameterType="io.renren.entity.smart.StudentEntity">
		update student 
		<set>
			<if test="studentCode != null">student_code = #{studentCode}, </if>
			<if test="studentNo != null">student_no = #{studentNo}, </if>
			<if test="userType != null">user_type = #{userType}, </if>
			<if test="studentName != null">student_name = #{studentName}, </if>
			<if test="sex != null">sex = #{sex}, </if>
			<if test="studentType != null">student_type = #{studentType}, </if>
			<if test="pic != null">pic = #{pic}, </if>
			<if test="classId != null">class_id = #{classId}, </if>
			<if test="passwordd != null  and passwordd.trim() != ''">passwordd = #{passwordd},</if>
			<if test="openId != null  and openId.trim() != ''">open_id = #{openId},</if>
			<if test="latitude != null  and latitude.trim() != ''">latitude = #{latitude},</if>
			<if test="longitude != null  and longitude.trim() != ''">longitude = #{longitude}</if>
			
		</set>
		where id = #{id}
	</update>
	
	<delete id="delete">
		delete from student where id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from student where id in 
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

</mapper>