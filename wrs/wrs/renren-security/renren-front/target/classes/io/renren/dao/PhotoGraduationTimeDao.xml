<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="io.renren.dao.PhotoGraduationTimeDao">

	<!-- 可根据自己需要-->
	<sql id="allColumnsAlias">
		id as id ,graduation_time as graduationTime ,graduation_name as graduationName ,gmt_create as gmtCreate ,gmt_modified as gmtModified 		
	</sql>
	<!-- 可根据自己需要-->
	<sql id="allColumns">
		id ,graduation_time ,graduation_name ,gmt_create ,gmt_modified 		
	</sql>
	<!-- 可根据自己的需求，是否要使用 -->
    <resultMap type="io.renren.entity.PhotoGraduationTimeEntity" id="photoGraduationTimeMap">
		        <result property="id" column="id"/>
		        <result property="graduationTime" column="graduation_time"/>
		        <result property="graduationName" column="graduation_name"/>
		        <result property="gmtCreate" column="gmt_create"/>
		        <result property="gmtModified" column="gmt_modified"/>
	    </resultMap>

	<select id="queryObject" resultType="io.renren.entity.PhotoGraduationTimeEntity">
		select <include refid="allColumns"></include> from photo_graduation_time where id = #{value}
	</select>

	<select id="queryList" resultType="io.renren.entity.PhotoGraduationTimeEntity">
		select <include refid="allColumns"></include> from photo_graduation_time
        <choose>
            <when test="sidx != null and sidx.trim() != ''">
                order by ${sidx} ${order}
            </when>
			<otherwise>
                order by id desc
			</otherwise>
        </choose>
		<if test="offset != null and limit != null">
			limit #{offset}, #{limit}
		</if>
	</select>
	
	<resultMap type="io.renren.entity.PhotoClassEntity" id="queryClassMap">
		        <id property="id" column="pc_id"/>
		        <result property="name" column="name"/>
	</resultMap>
	
	<resultMap type="io.renren.entity.PhotoGraduationTimeEntity" id="queryGraduationClassMap">
		        <id property="id" column="pgt_id"/>
		        <result property="graduationTime" column="graduation_time"/>
		        <result property="graduationName" column="graduation_name"/>
		        <collection property="classList" resultMap="queryClassMap"></collection>
	</resultMap>
	
	
	<select id="queryGraduationClass" resultMap="queryGraduationClassMap">
	
		<choose>
			<when test="schoolId != null">
				SELECT pgt.id as  pgt_id ,pgt.graduation_time ,pgt.graduation_name,pc.id as pc_id , pc.name
				FROM photo_graduation_time pgt RIGHT JOIN photo_class pc ON 
				pgt.id=pc.graduation_time_id WHERE pgt.id in
		 		(SELECT graduation_time_id FROM photo_class WHERE status=#{status}  AND school_id=#{schoolId} and classify=#{classify}) 
		 		and pc.school_id=#{schoolId} and status=#{status}  and pc.classify=#{classify} ORDER BY 
				pgt.graduation_time;
			</when>
			<otherwise>
				SELECT pgt.id as  pgt_id ,pgt.graduation_time ,pgt.graduation_name,pc.id as pc_id , pc.name 
				FROM photo_graduation_time pgt RIGHT JOIN photo_class pc ON 
				 pgt.id=pc.graduation_time_id WHERE pgt.id in
		 		(SELECT graduation_time_id FROM photo_class WHERE status=#{status} AND college_id=#{collegeId} and classify=#{classify}) and 
		 		pc.college_id=#{collegeId} and status=#{status} and pc.classify=#{classify} ORDER BY 
				pgt.graduation_time;
			</otherwise>
		</choose>
		<if test="schoolId != null">
		
		</if>
	</select>
	
 	<select id="queryTotal" resultType="int">
		select count(*) from photo_graduation_time 
	</select>
	 
	<insert id="save" parameterType="io.renren.entity.PhotoGraduationTimeEntity" useGeneratedKeys="true" keyProperty="id">
		insert into photo_graduation_time
		(
			`graduation_time`, 
			`graduation_name`, 
			`gmt_create`, 
			`gmt_modified`
		)
		values
		(
			#{graduationTime}, 
			#{graduationName}, 
			#{gmtCreate}, 
			#{gmtModified}
		)
	</insert>
	 
	<update id="update" parameterType="io.renren.entity.PhotoGraduationTimeEntity">
		update photo_graduation_time 
		<set>
			<if test="graduationTime != null">`graduation_time` = #{graduationTime}, </if>
			<if test="graduationName != null">`graduation_name` = #{graduationName}, </if>
			<if test="gmtCreate != null">`gmt_create` = #{gmtCreate}, </if>
			<if test="gmtModified != null">`gmt_modified` = #{gmtModified}</if>
		</set>
		where id = #{id}
	</update>
	
	<delete id="delete">
		delete from photo_graduation_time where id = #{value}
	</delete>
	
	<delete id="deleteBatch">
		delete from photo_graduation_time where id in 
		<foreach item="id" collection="array" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>

</mapper>